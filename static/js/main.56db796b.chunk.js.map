{"version":3,"sources":["services/WeatherService.js","components/form/Form.js","resourses/img/night.jpg","resourses/img/blue_sky.jpg","components/weather/Weather.js","components/spinner/Spinner.js","components/app/App.js","index.js"],"names":["WeatherService","_apiBase","_apiKey","getResource","url","a","fetch","res","ok","Error","status","json","data","gettingWeather","city","transformSity","icon","weather","name","country","sys","description","feelsLike","Math","round","main","feels_like","temp","wind","speed","sunrise","timezone","sunset","pressure","humidity","Form","props","className","onSubmit","type","placeholder","onChange","onChangeCity","value","cityName","Weather","dateNow","Date","now","sunsetDistance","useState","time","setTime","useEffect","timer","setInterval","clearInterval","style","convertTime","timestamp","date","h","getUTCHours","m","getUTCMinutes","document","querySelector","background","night","blueSky","src","alt","Spinner","width","height","viewBox","fill","d","id","offset","stopColor","fillOpacity","attributeName","from","to","dur","repeatCount","cx","cy","r","begin","keyTimes","values","App","setCity","setCityName","error","setError","loading","setLoading","weatherService","onCityLoaded","onError","spinner","errorMessage","content","e","preventDefault","then","catch","target","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.56db796b.chunk.js","sourcesContent":["export default class WeatherService {\r\n    _apiBase = 'https://api.openweathermap.org/data/2.5/weather';\r\n    _apiKey = 'appid=60f6d2438edc03c76131adc3db79b9cb';\r\n\r\n    getResource = async (url) => {\r\n        let res = await fetch(url);\r\n\r\n        if (!res.ok) {\r\n            throw new Error(`Could not fetch ${url}, status:${res.status}`);\r\n        }\r\n\r\n        const data = await res.json();\r\n        return data\r\n    }\r\n\r\n    gettingWeather = async (city) => {\r\n        const res = await this.getResource(`${this._apiBase}?q=${city}&units=metric&lang=ru&${this._apiKey}`);\r\n        return this.transformSity(res);\r\n    }\r\n\r\n    transformSity = (city) => {\r\n        return {\r\n            icon: ` https://openweathermap.org/img/wn/${city.weather[0].icon}@2x.png`,\r\n            name: city.name,\r\n            country: city.sys.country,\r\n            description: city.weather[0].description,\r\n            feelsLike: Math.round(city.main.feels_like) + '\\xB0C',\r\n            temp: Math.round(city.main.temp) + '\\xB0C',\r\n            wind: Math.round(city.wind.speed) + 'м/с',\r\n            sunrise: city.sys.sunrise + city.timezone,\r\n            sunset: city.sys.sunset + city.timezone,\r\n            pressure: Math.round(city.main.pressure * 0.750063755419211) + 'мм рт.ст.',\r\n            humidity: city.main.humidity + '%',\r\n            timezone: city.timezone\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n","import './form.css';\r\n\r\nconst Form = (props) => {\r\n\r\n    return (\r\n        <form className='form' onSubmit={props.onSubmit}>\r\n            <input\r\n                name='city'\r\n                type='text'\r\n                placeholder='Погода в вашем городе'\r\n                onChange={props.onChangeCity}\r\n                value={props.cityName} />\r\n            <button>Получить погоду</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form;","export default __webpack_public_path__ + \"static/media/night.7bd13639.jpg\";","export default __webpack_public_path__ + \"static/media/blue_sky.3311531d.jpg\";","import { useEffect, useState } from 'react';\r\n\r\nimport night from '../../resourses/img/night.jpg';\r\nimport blueSky from '../../resourses/img/blue_sky.jpg';\r\n\r\nimport './weather.css';\r\n\r\nconst Weather = ({ city }) => {\r\n\r\n    const { icon, name, country, description, feelsLike, temp, wind, sunrise, sunset, pressure, humidity, timezone } = city;\r\n    const dateNow = Date.now() / 1000 + timezone;\r\n    const daylightHours = 100 / (sunset - sunrise);\r\n    const sunsetDistance = (dateNow - sunrise) * daylightHours;\r\n\r\n    const [time, setTime] = useState(dateNow);\r\n\r\n    useEffect(() => {\r\n        const timer = setInterval(() => setTime(time => time + 1), 1000);\r\n\r\n        return () => {\r\n            clearInterval(timer);\r\n        }\r\n    }, []);\r\n\r\n    const convertTime = (timestamp) => {\r\n        const date = new Date(timestamp * 1000);\r\n        const h = date.getUTCHours();\r\n        const m = date.getUTCMinutes() < 10 ? '0' + date.getUTCMinutes() : date.getUTCMinutes();\r\n        return `${h}:${m}`;\r\n    }\r\n\r\n    let style;\r\n    if (dateNow <= sunrise) {\r\n        style = { 'transform': `rotate(0deg)` };\r\n        document.querySelector('#root').style.background = `url(${night}) center center/cover no-repeat`;\r\n    } else if (dateNow > sunset) {\r\n        style = { 'transform': `rotate(100deg)` };\r\n        document.querySelector('#root').style.background = `url(${night}) center center/cover no-repeat`;\r\n\r\n    } else if (sunrise < dateNow || dateNow < sunset) {\r\n        style = { 'transform': `rotate(${sunsetDistance}deg)` };\r\n        document.querySelector('#root').style.background = `url(${blueSky}) center center/cover no-repeat `;\r\n    }\r\n\r\n    return (\r\n        <div className='weather'>\r\n            {\r\n                name ? <>\r\n                    <div className='weater__time'>{convertTime(time)}</div>\r\n                    <div className='weather__items'>\r\n                        <img className='weather__icon' src={icon} alt={icon} />\r\n                        <div className='weather__item'><span> {temp}</span> {name}</div>\r\n                    </div>\r\n                    <ul className='weather__list'>\r\n                        <li>Местоположение: {name}, {country}</li>\r\n                        <li>Температура: {temp} </li>\r\n                        <li>По ощущению: {feelsLike} </li>\r\n                        <li>Ветер: {wind}</li>\r\n                        <li>Осадки: {description}</li>\r\n                        <li>Давление: {pressure}</li>\r\n                        <li>Влажность: {humidity}</li>\r\n                        <li>\r\n                            <div className='weather__list-line'>\r\n                                <span style={style}></span>\r\n                            </div>\r\n                            <div className='weather__list-sun'>\r\n                                <span>Восход: {convertTime(sunrise)} </span>\r\n                                <span>Закат: {convertTime(sunset)} </span>\r\n                            </div>\r\n                        </li>\r\n                    </ul>\r\n                </> :\r\n                    <h2>Введите название города</h2>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Weather;","const Spinner = () => {\r\n    return (\r\n        <div >\r\n            <svg style={{ 'display': 'block', 'margin': '50px auto' }} width=\"64px\" height=\"64px\" viewBox=\"0 0 128 128\" >\r\n                <path fill=\"#000000\" className=\"cls-1\" d=\"M64 127.75a64 64 0 1 1 64-64 64 64 0 0 1-64 64zM125.72 65h-13.75A47.86 47.86 0 0 1 65 111.73v13.74A61.73 61.73 0 0 0 125.72 65zM65 65v21.95A23.2 23.2 0 0 0 87.2 65H65zm22.2-2A23.22 23.22 0 0 0 65 40.55V63h22.23zm-46.37 2A23.2 23.2 0 0 0 63 86.95V65H40.8zM63 63V40.55A23.22 23.22 0 0 0 40.78 63H63zm-24.2 2H18.3A45.85 45.85 0 0 0 63 109.72V88.95A25.2 25.2 0 0 1 38.8 65zm0-2A25.2 25.2 0 0 1 63 38.55V18.03A45.85 45.85 0 0 0 18.28 63h20.5zM65 38.55A25.2 25.2 0 0 1 89.2 63h20.77A45.85 45.85 0 0 0 65 18.03v20.52zM89.2 65A25.2 25.2 0 0 1 65 88.95v20.77A45.85 45.85 0 0 0 109.97 65H89.2zM63 125.47v-13.75A47.86 47.86 0 0 1 16.28 65h-14A61.73 61.73 0 0 0 63 125.47zM2.27 63h14A47.86 47.86 0 0 1 63 16.03v-14A61.73 61.73 0 0 0 2.27 63zM65 2.02v14A47.86 47.86 0 0 1 111.98 63h13.75A61.73 61.73 0 0 0 65 2.02z\" />\r\n                <g><linearGradient id=\"linear-gradient\">\r\n                    <stop offset=\"0%\" stopColor=\"#000000\" />\r\n                    <stop offset=\"100%\" stopColor=\"#ffffff\" />\r\n                </linearGradient>\r\n                    <path fill=\"url(#linear-gradient)\" fillOpacity=\"0.5\" d=\"M65.128,64.894l0.025,60.968a61.781,61.781,0,0,1-32.011-8.315q-0.705-.406-1.4-0.83L62.531,63.4Z\" />\r\n                    <animateTransform attributeName=\"transform\" type=\"rotate\" from=\"0 64 64\" to=\"360 64 64\" dur=\"2280ms\" repeatCount=\"indefinite\"></animateTransform>\r\n                    <path fill=\"#000000\" d=\"M62.531,63.4l2.6,1.5L34.257,118.374l-2.6-1.5Z\" />\r\n                </g>\r\n                <circle fill=\"#000000\" cx=\"55.641\" cy=\"97.563\" r=\"6.047\">\r\n                    <animate attributeName=\"opacity\" dur=\"2280ms\" begin=\"0s\" repeatCount=\"indefinite\" keyTimes=\"0;1\" values=\"1;0\" />\r\n                </circle>\r\n            </svg>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Spinner;","import { useState } from 'react';\nimport WeatherService from './../../services/WeatherService';\nimport Form from '../form/Form';\nimport Weather from '../weather/Weather';\nimport Spinner from '../spinner/Spinner';\n\nimport './app.css';\n\nfunction App() {\n    const [city, setCity] = useState([]);\n    const [cityName, setCityName] = useState('');\n    const [error, setError] = useState(false);\n    const [loading, setLoading] = useState(false);\n\n    const weatherService = new WeatherService();\n\n    const onSubmit = (e) => {\n        e.preventDefault();\n        setLoading(true);\n\n        if (cityName) {\n            weatherService.gettingWeather(cityName)\n                .then(onCityLoaded)\n                .catch(onError)\n        } else {\n            onError();\n        }\n    }\n\n    const onCityLoaded = (city) => {\n        setCity(city);\n        setCityName('');\n        setError(false);\n        setLoading(false);\n    }\n\n    const onError = () => {\n        setError(true)\n        setCity([]);\n        setLoading(false);\n        setCityName('');\n    }\n\n    const onChangeCity = (e) => {\n        setCityName(e.target.value);\n    }\n\n    const spinner = loading ? <Spinner /> : null;\n    const errorMessage = error ? <h2>Введите название города</h2> : null\n    const content = !(spinner || errorMessage) ? <Weather city={city} /> : null;\n\n    return (\n        <div className=\"app\">\n            <h1>погода</h1>\n\n            <Form onSubmit={onSubmit} cityName={cityName} onChangeCity={onChangeCity} />\n            {errorMessage}\n            {spinner}\n            {content}\n\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/App';\n\nimport './index.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}