{"version":3,"sources":["services/WeatherService.js","components/form/Form.js","helpers/convertTime.js","components/spinner/Spinner.js","components/weatherHourly/WeatherHourly.js","resourses/img/night.jpg","resourses/img/blue_sky.jpg","components/weatherMain/WeatherMain.js","components/weatherDaily/WeatherDaily.js","components/weather/Weather.js","components/app/App.js","index.js"],"names":["weatherService","_apiBase","_apiKey","getResource","url","a","fetch","res","ok","Error","status","json","data","gettingWeather","city","transformSity","gettingWeatherHourly","lat","lon","hourly","map","transformWeatherHourly","gettingWeatherDaily","daily","transformWeatherDaily","icon","weather","name","country","sys","description","feelsLike","Math","round","main","feels_like","temp","wind","speed","sunrise","sunset","pressure","humidity","timezone","coordLat","coord","coordLon","time","dt","tempMinMax","max","min","morn","day","eve","night","wind_speed","uvi","Form","props","className","onSubmit","type","placeholder","onChange","onChangeCity","value","cityName","convertTime","timestamp","date","Date","h","getUTCHours","m","getUTCMinutes","convertdata","getDay","getDate","getMonth","Spinner","style","width","height","viewBox","fill","d","id","offset","stopColor","fillOpacity","attributeName","from","to","dur","repeatCount","cx","cy","r","begin","keyTimes","values","WeatherHourly","useState","weatherHourly","setweatherHourly","error","setError","loading","setLoading","useEffect","onRequestWeather","then","onWeatherLoaded","catch","onError","breakpoints","slidesPerView","i","src","alt","WeatherMain","borderTop","dateNow","now","sunsetDistance","setTime","timer","setInterval","clearInterval","document","body","background","blueSky","WeatherDaily","weatherDaily","setweatherDaily","setId","showWeather","setShowWeather","showContent","setShowContent","elements","item","active","onClick","onShowWeather","newItem","activeContent","Weather","App","JSON","parse","localStorage","getItem","setCity","setCityName","setItem","stringify","onCityLoaded","spinner","errorMessage","content","e","preventDefault","target","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b2d2ff7d.chunk.js","sourcesContent":["export const weatherService = () => {\r\n    const _apiBase = 'https://api.openweathermap.org/data/2.5/';\r\n    const _apiKey = 'appid=60f6d2438edc03c76131adc3db79b9cb';\r\n\r\n    const getResource = async (url) => {\r\n        let res = await fetch(url);\r\n\r\n        if (!res.ok) {\r\n            throw new Error(`Could not fetch ${url}, status:${res.status}`);\r\n        }\r\n\r\n        const data = await res.json();\r\n        return data\r\n    }\r\n\r\n    const gettingWeather = async (city) => {\r\n        const res = await getResource(`${_apiBase}weather?q=${city}&units=metric&lang=ru&${_apiKey}`);\r\n        return transformSity(res);\r\n    }\r\n\r\n    const gettingWeatherHourly = async (lat, lon) => {\r\n        const res = await getResource(`${_apiBase}onecall?lat=${lat}&lon=${lon}&units=metric&lang=ru&${_apiKey}`);\r\n        return res.hourly.map(transformWeatherHourly);\r\n    }\r\n\r\n    const gettingWeatherDaily = async (lat, lon) => {\r\n        const res = await getResource(`${_apiBase}onecall?lat=${lat}&lon=${lon}&units=metric&lang=ru&${_apiKey}`);\r\n        return res.daily.map(transformWeatherDaily);\r\n    }\r\n\r\n    const transformSity = (city) => {\r\n        return {\r\n            icon: ` https://openweathermap.org/img/wn/${city.weather[0].icon}@2x.png`,\r\n            name: city.name,\r\n            country: city.sys.country,\r\n            description: city.weather[0].description,\r\n            feelsLike: Math.round(city.main.feels_like) + '\\xB0C',\r\n            temp: Math.round(city.main.temp) + '\\xB0C',\r\n            wind: Math.round(city.wind.speed) + 'м/с',\r\n            sunrise: city.sys.sunrise,\r\n            sunset: city.sys.sunset,\r\n            pressure: Math.round(city.main.pressure * 0.750063755419211) + 'мм рт.ст.',\r\n            humidity: city.main.humidity + '%',\r\n            timezone: city.timezone,\r\n            coordLat: city.coord.lat,\r\n            coordLon: city.coord.lon\r\n        }\r\n    }\r\n\r\n\r\n    const transformWeatherHourly = (city) => {\r\n        return {\r\n            icon: ` https://openweathermap.org/img/wn/${city.weather[0].icon}@2x.png`,\r\n            temp: Math.round(city.temp) + '\\xB0C',\r\n            time: city.dt,\r\n            timezone: city.timezone\r\n        }\r\n    }\r\n\r\n    const transformWeatherDaily = (city) => {\r\n        return {\r\n            time: city.dt,\r\n            icon: ` https://openweathermap.org/img/wn/${city.weather[0].icon}@2x.png`,\r\n            description: city.weather[0].description,\r\n            tempMinMax: `${Math.round(city.temp.max)} / ${Math.round(city.temp.min)} \\xB0C`,\r\n            temp: [\r\n                city.temp.morn,\r\n                city.temp.day,\r\n                city.temp.eve,\r\n                city.temp.night],\r\n            feelsLike: [\r\n                city.feels_like.morn,\r\n                city.feels_like.day,\r\n                city.feels_like.eve,\r\n                city.feels_like.night],\r\n            wind: Math.round(city.wind_speed) + 'м/с',\r\n            sunrise: city.sunrise,\r\n            sunset: city.sunset,\r\n            pressure: Math.round(city.pressure * 0.750063755419211) + 'мм рт.ст.',\r\n            humidity: city.humidity + '%',\r\n            uvi: Math.round(city.uvi)\r\n        }\r\n    }\r\n\r\n    return { gettingWeather, gettingWeatherHourly, gettingWeatherDaily };\r\n};\r\n\r\n\r\n\r\n\r\n","import './form.scss';\r\n\r\nconst Form = (props) => {\r\n\r\n    return (\r\n        <form className='form' onSubmit={props.onSubmit}>\r\n            <input\r\n                name='city'\r\n                type='text'\r\n                placeholder='Погода в вашем городе'\r\n                onChange={props.onChangeCity}\r\n                value={props.cityName} />\r\n            <button>Получить погоду</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form;","export const convertTime = (timestamp, timezone) => {\r\n    const date = new Date((timestamp + timezone) * 1000);\r\n    const h = date.getUTCHours();\r\n    const m = date.getUTCMinutes() < 10 ? '0' + date.getUTCMinutes() : date.getUTCMinutes();\r\n    return `${h}:${m}`;\r\n}\r\n\r\nexport const convertdata = (timestamp, timezone) => {\r\n    const date = new Date((timestamp + timezone) * 1000);\r\n    const days = [\"ВС\", \"ПН\", \"ВТ\", \"СР\", \"ЧТ\", \"ПТ\", \"СБ\"];\r\n    const months = [\"янв.\", \"фев.\", \"мар.\", \"апр.\", \"мая\", \"июня\",\r\n        \"июля\", \"авг.\", \"сен.\", \"окт.\", \"ноя.\", \"дек\"];\r\n    const fullDate = `${days[date.getDay()]}, ${date.getDate()} ${months[date.getMonth()]}`;\r\n    return fullDate;\r\n}","const Spinner = () => {\r\n    return (\r\n        <div >\r\n            <svg style={{ 'display': 'block', 'margin': '50px auto' }} width=\"64px\" height=\"64px\" viewBox=\"0 0 128 128\" >\r\n                <path fill=\"#000000\" className=\"cls-1\" d=\"M64 127.75a64 64 0 1 1 64-64 64 64 0 0 1-64 64zM125.72 65h-13.75A47.86 47.86 0 0 1 65 111.73v13.74A61.73 61.73 0 0 0 125.72 65zM65 65v21.95A23.2 23.2 0 0 0 87.2 65H65zm22.2-2A23.22 23.22 0 0 0 65 40.55V63h22.23zm-46.37 2A23.2 23.2 0 0 0 63 86.95V65H40.8zM63 63V40.55A23.22 23.22 0 0 0 40.78 63H63zm-24.2 2H18.3A45.85 45.85 0 0 0 63 109.72V88.95A25.2 25.2 0 0 1 38.8 65zm0-2A25.2 25.2 0 0 1 63 38.55V18.03A45.85 45.85 0 0 0 18.28 63h20.5zM65 38.55A25.2 25.2 0 0 1 89.2 63h20.77A45.85 45.85 0 0 0 65 18.03v20.52zM89.2 65A25.2 25.2 0 0 1 65 88.95v20.77A45.85 45.85 0 0 0 109.97 65H89.2zM63 125.47v-13.75A47.86 47.86 0 0 1 16.28 65h-14A61.73 61.73 0 0 0 63 125.47zM2.27 63h14A47.86 47.86 0 0 1 63 16.03v-14A61.73 61.73 0 0 0 2.27 63zM65 2.02v14A47.86 47.86 0 0 1 111.98 63h13.75A61.73 61.73 0 0 0 65 2.02z\" />\r\n                <g><linearGradient id=\"linear-gradient\">\r\n                    <stop offset=\"0%\" stopColor=\"#000000\" />\r\n                    <stop offset=\"100%\" stopColor=\"#ffffff\" />\r\n                </linearGradient>\r\n                    <path fill=\"url(#linear-gradient)\" fillOpacity=\"0.5\" d=\"M65.128,64.894l0.025,60.968a61.781,61.781,0,0,1-32.011-8.315q-0.705-.406-1.4-0.83L62.531,63.4Z\" />\r\n                    <animateTransform attributeName=\"transform\" type=\"rotate\" from=\"0 64 64\" to=\"360 64 64\" dur=\"2280ms\" repeatCount=\"indefinite\"></animateTransform>\r\n                    <path fill=\"#000000\" d=\"M62.531,63.4l2.6,1.5L34.257,118.374l-2.6-1.5Z\" />\r\n                </g>\r\n                <circle fill=\"#000000\" cx=\"55.641\" cy=\"97.563\" r=\"6.047\">\r\n                    <animate attributeName=\"opacity\" dur=\"2280ms\" begin=\"0s\" repeatCount=\"indefinite\" keyTimes=\"0;1\" values=\"1;0\" />\r\n                </circle>\r\n            </svg>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Spinner;","import { useEffect, useState } from \"react\";\r\nimport { Swiper, SwiperSlide } from 'swiper/react/swiper-react';\r\n\r\nimport { convertTime } from \"../../helpers/convertTime\";\r\nimport { weatherService } from './../../services/WeatherService';\r\nimport Spinner from './../spinner/Spinner';\r\n\r\nimport './weatherHourly.scss';\r\nimport 'swiper/swiper.scss';\r\n\r\n\r\nconst WeatherHourly = ({ city }) => {\r\n    const [weatherHourly, setweatherHourly] = useState([]);\r\n    const [error, setError] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const { gettingWeatherHourly } = weatherService();\r\n    const { coordLat, coordLon, timezone } = city;\r\n\r\n    useEffect(() => {\r\n        onRequestWeather();\r\n    }, []);\r\n\r\n\r\n    const onRequestWeather = () => {\r\n        setLoading(true);\r\n        gettingWeatherHourly(coordLat, coordLon)\r\n            .then(onWeatherLoaded)\r\n            .catch(onError)\r\n    }\r\n\r\n    const onWeatherLoaded = (weatherHourly) => {\r\n        setweatherHourly(weatherHourly);\r\n        setError(false);\r\n        setLoading(false);\r\n    }\r\n\r\n    const onError = () => {\r\n        setError(true);\r\n        setLoading(false);\r\n    }\r\n\r\n    if (loading) {\r\n        return <Spinner />;\r\n    } else if (error) {\r\n        return <h5>Ошибка загрузки</h5>\r\n    }\r\n\r\n    return (\r\n        <div className=\"weather-hourly\">\r\n            <h3 className=\"weather-hourly__title\">Почасовой прогноз</h3>\r\n            <Swiper\r\n                breakpoints={{\r\n                    768: {\r\n                        slidesPerView: 10\r\n                    },\r\n                    576: {\r\n                        slidesPerView: 7\r\n                    },\r\n                    320: {\r\n                        slidesPerView: 6\r\n                    }\r\n\r\n                }}\r\n            >\r\n                {weatherHourly.map(({ icon, temp, time }, i) => {\r\n                    if (i > 24) return;\r\n                    return (\r\n                        <SwiperSlide key={i} >\r\n                            <div className=\"weather-hourly__item\">{convertTime(time, timezone)}</div>\r\n                            <img className=\"weather-hourly__img\"\r\n                                src={icon}\r\n                                alt={icon} />\r\n                            <div className=\"weather-hourly__item\">\r\n                                {temp}\r\n                            </div>\r\n                        </SwiperSlide >\r\n                    )\r\n                })}\r\n            </Swiper >\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default WeatherHourly;\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/night.8afd95ec.jpg\";","export default __webpack_public_path__ + \"static/media/blue_sky.3311531d.jpg\";","import { useEffect, useState } from 'react';\r\n\r\nimport { convertTime } from '../../helpers/convertTime';\r\nimport night from '../../resourses/img/night.jpg';\r\nimport blueSky from '../../resourses/img/blue_sky.jpg';\r\n\r\nimport './weatherMain.scss';\r\n\r\nconst WeatherMain = ({ city }) => {\r\n\r\n    const { icon, name, country, description, feelsLike, temp, wind, sunrise, sunset, pressure, humidity, timezone } = city;\r\n    const dateNow = Date.now() / 1000;\r\n    const daylightHours = 100 / (sunset - sunrise);\r\n    const sunsetDistance = (dateNow - sunrise) * daylightHours;\r\n\r\n    const [time, setTime] = useState(dateNow);\r\n\r\n    useEffect(() => {\r\n        const timer = setInterval(() => setTime(time => time + 1), 1000);\r\n\r\n        return () => {\r\n            clearInterval(timer);\r\n        }\r\n    }, []);\r\n\r\n    let style;\r\n    let borderTop;\r\n    if (dateNow <= sunrise) {\r\n        style = { 'transform': `rotate(0deg)` };\r\n        borderTop = { 'borderTop': '2px solid rgba(255, 255, 0, .5)' };\r\n        document.body.style.background = `url(${night}) 0 0/cover no-repeat fixed`;\r\n    } else if (dateNow > sunset) {\r\n        style = { 'transform': `rotate(100deg)` };\r\n        borderTop = { 'borderTop': '2px solid rgba(255, 255, 0, .5)' };\r\n        document.body.style.background = `url(${night}) 0 0/cover no-repeat fixed`;\r\n    } else if (sunrise < dateNow || dateNow < sunset) {\r\n        style = { 'transform': `rotate(${sunsetDistance}deg)` };\r\n        document.body.style.background = `url(${blueSky}) 0 0/cover no-repeat fixed`;\r\n    }\r\n\r\n    return (\r\n        <div className='weather'>\r\n            <div className='weather__time'>{convertTime(time, timezone)}</div>\r\n            <div className='weather__items'>\r\n                <img className='weather__icon' src={icon} alt={icon} />\r\n                <div className='weather__item'><span> {temp}</span> {name}</div>\r\n            </div>\r\n            <ul className='weather__list' style={borderTop}>\r\n                <li>Местоположение: {name}, {country}</li>\r\n                <li>Температура: {temp} </li>\r\n                <li>По ощущению: {feelsLike} </li>\r\n                <li>Ветер: {wind}</li>\r\n                <li>Осадки: {description}</li>\r\n                <li>Давление: {pressure}</li>\r\n                <li>Влажность: {humidity}</li>\r\n                <li>\r\n                    <div className='weather__list-line'>\r\n                        <span style={style}></span>\r\n                    </div>\r\n                    <div className='weather__list-sun'>\r\n                        <span>Восход: {convertTime(sunrise, timezone)} </span>\r\n                        <span>Закат: {convertTime(sunset, timezone)} </span>\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherMain;","import { useEffect, useState } from \"react\";\r\n\r\nimport { weatherService } from './../../services/WeatherService';\r\nimport { convertTime, convertdata } from '../../helpers/convertTime';\r\nimport Spinner from './../spinner/Spinner';\r\n\r\nimport './weatherDaily.scss';\r\n\r\n\r\nconst WeatherDaily = ({ city }) => {\r\n    const [weatherDaily, setweatherDaily] = useState([]);\r\n    const [id, setId] = useState(null);\r\n    const [showWeather, setShowWeather] = useState(false);\r\n    const [showContent, setShowContent] = useState(false);\r\n    const [error, setError] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const { gettingWeatherDaily } = weatherService();\r\n    const { coordLat, coordLon, timezone } = city;\r\n\r\n    useEffect(() => {\r\n        onRequestWeather();\r\n    }, []);\r\n\r\n    const onRequestWeather = () => {\r\n        setLoading(true);\r\n        gettingWeatherDaily(coordLat, coordLon)\r\n            .then(onWeatherLoaded)\r\n            .catch(onError)\r\n    }\r\n\r\n    const onWeatherLoaded = (weatherDaily) => {\r\n        setweatherDaily(weatherDaily);\r\n        setError(false);\r\n        setLoading(false);\r\n    }\r\n\r\n    const onError = () => {\r\n        setError(true)\r\n        setLoading(false);\r\n    }\r\n\r\n    const onShowWeather = (id) => {\r\n        setId(id);\r\n        setShowWeather(showWeather => !showWeather);\r\n    }\r\n\r\n    const onShowContent = () => {\r\n        setShowContent(showContent => !showContent);\r\n    }\r\n\r\n\r\n    const renderItems = (arr) => {\r\n        return arr.map((item, i) => {\r\n            const { time, icon, description, tempMinMax, temp, feelsLike, wind,\r\n                sunrise, sunset, pressure, humidity, uvi } = item;\r\n\r\n            const active = i === id && showWeather && showContent ? 'active' : '';\r\n\r\n            return (\r\n                <div className=\" weather-daily__content\" key={i}>\r\n                    <div\r\n                        className={`weather-daily__block ${active}`}\r\n                        onClick={() => onShowWeather(i)}>\r\n                        <div className=\"weather-daily__time\" >{convertdata(time, timezone)}</div>\r\n                        <div className=\"weather-daily__temp\">\r\n                            <img className=\"weather-daily__img\" src={icon} alt={icon} />\r\n                            <span> {tempMinMax}</span>\r\n                        </div>\r\n                        <div className=\"weather-daily__descr\"> {description}</div>\r\n                    </div>\r\n                    <div className={`weather-daily__full-content full-content ${active}`}>\r\n                        <div className=\"full-content__blocks\">\r\n                            <div className=\"full-content__items\">\r\n                                <span></span>\r\n                                <span>Утро</span>\r\n                                <span>День</span>\r\n                                <span>Вечер</span>\r\n                                <span>Ночь</span>\r\n                            </div>\r\n                            <div className=\"full-content__items\">\r\n                                Температура:\r\n                                {temp.map((item, i) => {\r\n                                    let newItem = Math.round(item) + '\\xB0C';\r\n                                    return <span key={i}>{newItem}</span>\r\n                                })}\r\n                            </div>\r\n                            <div className=\"full-content__items\">\r\n                                По ощущению:\r\n                                {feelsLike.map((item, i) => {\r\n                                    let newItem = Math.round(item) + '\\xB0C';\r\n                                    return <span key={i}>{newItem}</span>\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\" full-content__wrap\">\r\n                            <div className=\"full-content__block\">\r\n                                <span>Ветер:</span>\r\n                                <span>{wind}</span>\r\n                            </div>\r\n                            <div className=\"full-content__block\">\r\n                                <span>Давление:</span>\r\n                                <span>{pressure}</span>\r\n                            </div>\r\n                            <div className=\"full-content__block\">\r\n                                <span>Влажность:</span>\r\n                                <span>{humidity}</span>\r\n                            </div>\r\n                            <div className=\"full-content__block\">\r\n                                <span>UF:</span>\r\n                                <span>{uvi}</span>\r\n                            </div>\r\n                            <div className=\"full-content__block\">\r\n                                <span>Восход:</span>\r\n                                <span>{convertTime(sunrise, timezone)} </span>\r\n                            </div>\r\n                            <div className=\"full-content__block\">\r\n                                <span>Закат:</span>\r\n                                <span>{convertTime(sunset, timezone)}</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    if (loading) {\r\n        return <Spinner />;\r\n    } else if (error) {\r\n        return <h5>Ошибка загрузки</h5>;\r\n    }\r\n\r\n    const elements = renderItems(weatherDaily);\r\n    const activeContent = showContent ? 'active' : '';\r\n\r\n    return (\r\n        <div className=\"weather-daily\">\r\n            <h3 onClick={onShowContent}\r\n                className={`weather-daily__title  ${activeContent}`}>\r\n                Прогноз на 8 дней</h3>\r\n            <div className={`weather-daily__wrap  ${activeContent}`}>\r\n                {elements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherDaily;\r\n","import WeatherHourly from \"../weatherHourly/WeatherHourly\";\r\nimport WeatherMain from \"../weatherMain/WeatherMain\";\r\nimport WeatherDaily from './../weatherDaily/WeatherDaily';\r\n\r\n\r\nconst Weather = ({ city }) => {\r\n    return (\r\n        <>\r\n            {\r\n                city.name ? <>\r\n                    <WeatherMain city={city} />\r\n                    <WeatherHourly city={city} />\r\n                    <WeatherDaily city={city} />\r\n                </> :\r\n                    <h2>Введите название города</h2>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Weather;","import { useEffect, useState } from 'react';\n\nimport { weatherService } from './../../services/WeatherService';\nimport Form from '../form/Form';\nimport Weather from '../weather/Weather';\nimport Spinner from '../spinner/Spinner';\n\nimport './app.scss';\n\nfunction App() {\n    const [city, setCity] = useState(JSON.parse(localStorage.getItem('city')) || []);\n    const [cityName, setCityName] = useState('');\n    const [error, setError] = useState(false);\n    const [loading, setLoading] = useState(false);\n\n    const { gettingWeather } = weatherService();\n\n    useEffect(() => {\n        localStorage.setItem('city', JSON.stringify(city));\n    }, [city]);\n\n    const onSubmit = (e) => {\n        e.preventDefault();\n        setLoading(true);\n\n        if (cityName) {\n            gettingWeather(cityName)\n                .then(onCityLoaded)\n                .catch(onError)\n        } else {\n            onError();\n        }\n    }\n\n    const onCityLoaded = (city) => {\n        setCity(city);\n        setCityName('');\n        setError(false);\n        setLoading(false);\n    }\n\n    const onError = () => {\n        setError(true)\n        setCity([]);\n        setLoading(false);\n        setCityName('');\n    }\n\n    const onChangeCity = (e) => {\n        setCityName(e.target.value);\n    }\n\n    const spinner = loading ? <Spinner /> : null;\n    const errorMessage = error ? <h2>Введите название города</h2> : null\n    const content = !(spinner || errorMessage) ? <Weather city={city} /> : null;\n\n    return (\n        <div className=\"app\">\n            <h1>погода</h1>\n            <Form onSubmit={onSubmit} cityName={cityName} onChangeCity={onChangeCity} />\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/App';\n\nimport './index.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}